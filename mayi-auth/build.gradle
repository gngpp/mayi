/*
 * Copyright (c) 2021 gngpp
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

//file:noinspection GroovyAssignabilityCheck
plugins {
    id 'org.springframework.boot' version "$SpringbootVersion"
    id 'io.spring.dependency-management' version "${SpringDependencyManagerVersion}"
}

configurations {
    runtime.exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    compile.exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
}

dependencies {
    // sub projects
    implementation project(':mayi-upms:mayi-upms-api')
    implementation project(':mayi-common:mayi-common-core')
    implementation project(':mayi-common:mayi-common-encrypt')
    implementation project(':mayi-common:mayi-common-component')
    implementation project(':mayi-common:mayi-common-security')
    implementation project(':mayi-common:mayi-common-remote')

    // miscellaneous
    implementation "io.jsonwebtoken:jjwt-api:$JWTVersion"
    implementation "io.jsonwebtoken:jjwt-impl:$JWTVersion"
    implementation "io.jsonwebtoken:jjwt-jackson:$JWTVersion"
    implementation "de.codecentric:spring-boot-admin-starter-client:$AdminMonitorVersion"
    implementation 'com.github.whvcse:easy-captcha:1.6.2'
    implementation 'com.github.shalousun:common-util:1.9.2'
    implementation "com.github.ben-manes.caffeine:caffeine:$CaffeineVersion"
    runtimeOnly "mysql:mysql-connector-java:$MysqlConnectorVersion"

    // SpringBoot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Authorization Server And Resource Server (dependency has been integrated Authorization Server / Resource Server and Spring Security)
    implementation "org.springframework.security:spring-security-oauth2-authorization-server:$AuthorizationServerVersion"

    // SpringCloud
    implementation "org.springframework.cloud:spring-cloud-starter-bootstrap"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation "org.springframework.cloud:spring-cloud-loadbalancer"
    implementation "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery"
    implementation "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config"


}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$SpringCloudVersion"
        mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:$SpringCloudAlibabaVersion"
    }
}

test {
    useJUnitPlatform()
}
