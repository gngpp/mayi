/*
 * Copyright (c) 2021 gngpp
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

//file:noinspection GroovyAssignabilityCheck

configurations.all() {
    Configuration configuration ->({
        // Directly fail to build when encountering a version conflict
        configuration.resolutionStrategy.failOnVersionConflict()
    })
}

// all project settings
allprojects {
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    apply plugin: 'java'
    apply from: this.rootProject.file('gradle.properties')

    group = 'com.gngpp'
    version = 'latest'
    // Specify compilation version
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }
}

// Specify compilation version
subprojects {
     repositories {
         mavenLocal()
         maven {
             url = "https://maven.aliyun.com/nexus/content/groups/public/"
         }
         mavenCentral()
     }
     dependencies {
         implementation "com.google.guava:guava:${GuavaVersion}"
         implementation "org.mapstruct:mapstruct:${MapstructVersion}"
         annotationProcessor "org.mapstruct:mapstruct-processor:${MapstructVersion}"
     }
}

task resolveDependencies {
    setDescription "Resolves all projects dependencies from the repository."
    setGroup "Build Server"

    doLast {
        rootProject.allprojects { project ->
            println ">> " + project
            Set<Configuration> configurations =
                    project.buildscript.configurations +
                            project.configurations
            configurations
                    .findAll { it.canBeResolved }
                    .forEach {
                        resolveDependencies(it)
                    }
        }
    }
}

def resolveDependencies(Configuration it) {
    try {
        Set<File> files = it.resolve()
        DependencySet set = it.allDependencies
        if (set.size() > 0) {
            println ">>> " + it
            println ">>>> Dependencies "
            set.forEach {
                println ">>>>> " +
                        it.group + ":" +
                        it.name + ":" +
                        it.version
            }
            println ">>>> Files"
            files.forEach {
                println ">>>>> " + it.canonicalPath
            }
        }
    } catch (e) {
        println ">>> " + it
        println ">>>> " + e.message
    }
}